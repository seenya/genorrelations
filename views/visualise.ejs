<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html lang="en">
<head>
<meta charset="utf-8">
<link rel="stylesheet" type="text/css" href="stylesheets/stylesheet.css">
<link rel="stylesheet" type="text/css" href="stylesheets/jquery-ui-1.10.3.custom.css">
<title>Gene Viz</title>
<script src="js/d3.v3.min.js"></script>
<script src="js/jquery-1.9.1.js"></script></head>

<script>
function button_onClick(correlation)
{
    var link = document.getElementById("geneSelector").value;
    console.log(link);
    document.location=link+"&correlation="+correlation;
}
</script>
<body>
  <div id="container">
    <div id="rightArea">
      <div id="inputArea">

        <p>
        <!-- TODO: Populate dynamically via load/save feature -->
          <select id="sampleSet" class="selector" name="Sample Selector" onChange="document.location = this.value" value="GO">
            <option value="">Select a sample</option>
            <option value="visualise?id=95" <%= selectedDatasetId == 95 ? "selected" : "" %> >Real dataset (small)</option>
            <option value="visualise?id=2" <%= selectedDatasetId == 2 ? "selected" : "" %> >Randomised dataset (small)</option>
            <option value="visualise?id=1" <%= selectedDatasetId == 1 ? "selected" : "" %> >Randomised dataset (massive)</option>
            <option value="visualise?id=3" <%= selectedDatasetId == 3 ? "selected" : "" %> >Randomised dataset (mid sized)</option>
          </select>
        </p>

        <p>
        <!-- TODO: Populate dynamically with top X gene clusters to analyse  -->
          <select id="geneSelector" class="selector" name="Gene Selector" onChange="document.location = this.value" value="GO">
              <option value="visualise?id=<%=selectedDatasetId%>" <%= selectedGeneId === undefined ? "selected" : ""%>>Select gene</option>
            <% for(var i=0; i<topGenes.length; i++) {%>
                <option value="visualise?id=<%=selectedDatasetId%>&amp;geneId=<%=topGenes[i].geneIndex%>" <%= selectedGeneId == topGenes[i].geneIndex ? "selected" : ""%>><%=topGenes[i].geneName%> (<%=topGenes[i].count%>)</option>
            <% } %>
          </select>
        </p>

        <p>
        <input type=button onClick="button_onClick(0)" value="All">
        <input type=button onClick="button_onClick(1)" value="Positive">
        <input type=button onClick="button_onClick(2)" value="Negative">
        </p>


      </div>
      <div id="samplesArea"><h1>Genes</h1></div>
    </div>
    <div id="leftArea">
      <div id="heading">[Heading]</div>
      <div id="chartArea"></div>
    </div>

  </div>

<script>// Variables in ${} need to be parsed with appropriate values by the code before this script can be run.

// ---------------------------------------------------------------------------------------
// Define data
// ---------------------------------------------------------------------------------------

// Heading for the page
var heading = "<%= name %>";

var title = document.getElementsByTagName("title");
title[0].text = title[0].text + ": " + heading;

// Main list of points. Array of dictionaries, one for each node to be drawn.

var points = <%- JSON.stringify(nodes) %>;

// List of edge indices. 
var connectedIndices = <%- JSON.stringify(edges) %>;


// Dimension of the svg area to be created.
var chartArea = document.getElementById("chartArea");
var w = chartArea.offsetWidth,
    h = chartArea.offsetHeight;

console.log(w);
console.log(h);

// Contains display string for each sample id
//var sampleGroupDictionary = ${sampleGroupDictionary};

// These are used to create a unique id for each point, while not relying on the label used in the point.
var sampleIndices = {};
for(var i = 0; i < points.length; i++) {
    sampleIndices[points[i].label] = i;
}

var labelDistance = 0;

// Define nodes and edges (also called links)
var links = [];
for(var i = 0; i < connectedIndices.length; i++) {
    var lineColour = (connectedIndices[i][2]>=0)? '#0000ff' : '#ff0000';
    links.push({source:connectedIndices[i][0], target:connectedIndices[i][1], weight:1, color:lineColour});
    //links.push({source:i+1, target:connectedIndices[i], weight:1});
};

// Define labelAnchors and labelAnchorLinks. Note that these are duplicated
var labelAnchors = [];
var labelAnchorLinks = [];
var duplicate = 2;
for(var i = 0; i < points.length; i++) {
    for(var j = 0; j < duplicate; j++) {
        labelAnchors.push({
            node : points[i]
        });
    }
};

for(var i = 0; i < points.length; i++) {
    labelAnchorLinks.push({
        source : i * duplicate,
        target : i * duplicate + 1,
        weight : 1
    });
};

// var test = massageStructure(connectedIndices);
// structure = {"node #": [ connection nodes] }
//
//
function massageStructure(connections) {
var structure = {}
    // Pass 1: Find number of connections for each node
    for (var i = 0; i < connections.length; i++) {
        // connections[i] is the a single data point linking nodes to each other
        // nodes are contained in element 0 and 1
        insert(structure, connections[i][0], connections[i][1])
        insert(structure, connections[i][1], connections[i][0])
    }

    // Pass 2: Remove nodes with only one connection
    for (var key in Object.keys(structure)) {
        var links = structure[key];
        if (links.length == 1) {
            // throw away
        }
    }

    // Pass 3: Rebuild connection list based on 'big' nodes...
    // This is the big one...
    // Possibly merge with Pass 2
}

function insert(storage, node1, node2) {
    if (!(node1 in storage)) {
        dictionary[node1] = [];
    }
    dictionary[node1].push(node2);
}


// ---------------------------------------------------------------------------------------
// Define functions
// ---------------------------------------------------------------------------------------

// Handling mouse over and out events (note that this code needs to come before .on calls for circles, otherwise it doeesn't work)

var nodeMouseOverFunction = function() {
    var circle = d3.select(this);   // this selects the circle
    circle.attr("class","highlight");   // change its class to highlight it
    d3.selectAll("#anchorText_"+circle.attr("index")).attr("class","highlightedAnchor");
    d3.selectAll("#li_"+circle.attr("index")).attr("class","highlightedSample");
}

var nodeMouseOutFunction = function() {
    var circle = d3.select(this);
    circle.attr("class","normal");
    d3.selectAll("#anchorText_"+circle.attr("index")).attr("class","normalAnchor");
    d3.selectAll("#li_"+circle.attr("index")).attr("class","normalSample");
}

// ---------------------------------------------------------------------------------------
// Draw using the data
// ---------------------------------------------------------------------------------------

// Set heading for the page
d3.select("#heading").text(heading + " (" + points.length + ")");

// Populate the area with the list of sample ids first, because for large number of these, we increase the height of svg area.
var sampleNode = d3.select("#samplesArea").append("ul").selectAll("li")
    .data(points)
    .enter().append("li")
    .attr("id", function(d, i) { return "li_"+i; })
    .text(function(d) { return d.label; });

// Define the plot area with specified width and height (note that we must convert height attribute to float before using max function).
var vis = d3.select("body").select("#leftArea").select("#chartArea")
    .append("svg:svg")
      .attr("pointer-events", "all")
    .append('svg:g')
    .call(d3.behavior.zoom().on("zoom", redraw))
    .append('svg:g');

vis.append('svg:rect')
    .attr('width', w)
    .attr('height', chartArea.offsetHeight)
    .attr('fill', 'white');

function redraw() {
  console.log("here", d3.event.translate, d3.event.scale);
    vis.attr("transform",
          "translate(" + d3.event.translate + ")"
                + " scale(" + d3.event.scale + ")");
}

// Create a force layout on the points
var force = d3.layout.force()
    .size([w, h])
    .nodes(points)
    .links(links)
    .gravity(1)
    .linkDistance(50)
    .charge(-3000)
    .linkStrength(function(x) {
      return x.weight * 10
    });
force.start();

// Create a force layout on the labelAnchors
var force2 = d3.layout.force()
    .nodes(labelAnchors)
    .links(labelAnchorLinks)
    .gravity(0)
    .linkDistance(0)
    .linkStrength(8)
    .charge(-100)
    .size([w, h]);
force2.start();

// Draw links first so that nodes are on top
var link = vis.selectAll("line.link").data(links).enter().append("svg:line")
    .attr("class", "link")
    .style("stroke", function(d) {
        return d.color;
    });
var anchorLink = vis.selectAll("line.anchorLink").data(labelAnchorLinks)

// Add a circle to each node and stylise it
var node = vis.selectAll("g.node")
    .data(force.nodes())
    .enter()
    .append("svg:g");

node.append("svg:circle")
    .attr("index", function(d,i) {
        return i;
    })
    .attr("r", function(d) {
        return d.radius;
    })
    .attr("fill", function(d) {
        return d.fill;
    })
    .attr("stroke", function(d) {
        return d.stroke;
    })
    .attr("class", "normal")
    .on("mouseover", nodeMouseOverFunction)
    .on("mouseout", nodeMouseOutFunction);

node.call(force.drag);

var anchorNode = vis.selectAll("g.anchorNode").data(labelAnchors).enter().append("svg:g");
anchorNode.append("svg:circle").attr("r", 0).style("fill", "#FFF");
anchorNode.append("svg:text")
    .text(function(d, i) {
        return i % 2 == 0 ? "" : d.node.label
    })
    .attr("class", "normalAnchor")
    .attr("id", function(d, i) { 
        return i % 2 == 0 ? "" : "anchorText_"+sampleIndices[d.node.label];
    });

var updateLink = function() {
    this.attr("x1", function(d) {
        return d.source.x;
    }).attr("y1", function(d) {
        return d.source.y;
    }).attr("x2", function(d) {
        return d.target.x;
    }).attr("y2", function(d) {
        return d.target.y;
    });
}

var updateNode = function() {
    this.attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
    });
}

force.on("tick", function() {
    force2.start();
    node.call(updateNode);

    anchorNode.each(function(d, i) {
        if(i % 2 == 0) {
            d.x = d.node.x;
            d.y = d.node.y;
        } else {
            var b = this.childNodes[1].getBBox();
            var diffX = d.x - d.node.x;
            var diffY = d.y - d.node.y;
            var dist = Math.sqrt(diffX * diffX + diffY * diffY);
            var shiftX = b.width * (diffX - dist) / (dist * 2);
            shiftX = Math.max(-b.width, Math.min(0, shiftX));
            var shiftY = 5;
            this.childNodes[1].setAttribute("transform", "translate(" + shiftX + "," + shiftY + ")");
        }
   });

    anchorNode.call(updateNode);
    link.call(updateLink);
    anchorLink.call(updateLink);
});

</script></body>
</html>
